// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/repo/interfaces.go -destination=mocks/repo_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIURLRepository is a mock of IURLRepository interface.
type MockIURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIURLRepositoryMockRecorder
	isgomock struct{}
}

// MockIURLRepositoryMockRecorder is the mock recorder for MockIURLRepository.
type MockIURLRepositoryMockRecorder struct {
	mock *MockIURLRepository
}

// NewMockIURLRepository creates a new mock instance.
func NewMockIURLRepository(ctrl *gomock.Controller) *MockIURLRepository {
	mock := &MockIURLRepository{ctrl: ctrl}
	mock.recorder = &MockIURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIURLRepository) EXPECT() *MockIURLRepositoryMockRecorder {
	return m.recorder
}

// BatchDeleteURLs mocks base method.
func (m *MockIURLRepository) BatchDeleteURLs(ctx context.Context, shortURLs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteURLs", ctx, shortURLs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDeleteURLs indicates an expected call of BatchDeleteURLs.
func (mr *MockIURLRepositoryMockRecorder) BatchDeleteURLs(ctx, shortURLs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteURLs", reflect.TypeOf((*MockIURLRepository)(nil).BatchDeleteURLs), ctx, shortURLs)
}

// GetOriginalURL mocks base method.
func (m *MockIURLRepository) GetOriginalURL(ctx context.Context, shortID string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalURL", ctx, shortID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOriginalURL indicates an expected call of GetOriginalURL.
func (mr *MockIURLRepositoryMockRecorder) GetOriginalURL(ctx, shortID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalURL", reflect.TypeOf((*MockIURLRepository)(nil).GetOriginalURL), ctx, shortID)
}

// GetShortIDByOriginalURL mocks base method.
func (m *MockIURLRepository) GetShortIDByOriginalURL(ctx context.Context, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortIDByOriginalURL", ctx, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortIDByOriginalURL indicates an expected call of GetShortIDByOriginalURL.
func (mr *MockIURLRepositoryMockRecorder) GetShortIDByOriginalURL(ctx, originalURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortIDByOriginalURL", reflect.TypeOf((*MockIURLRepository)(nil).GetShortIDByOriginalURL), ctx, originalURL)
}

// Ping mocks base method.
func (m *MockIURLRepository) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockIURLRepositoryMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockIURLRepository)(nil).Ping), ctx)
}

// SaveBatchURL mocks base method.
func (m *MockIURLRepository) SaveBatchURL(ctx context.Context, shortID, originalURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatchURL", ctx, shortID, originalURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBatchURL indicates an expected call of SaveBatchURL.
func (mr *MockIURLRepositoryMockRecorder) SaveBatchURL(ctx, shortID, originalURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatchURL", reflect.TypeOf((*MockIURLRepository)(nil).SaveBatchURL), ctx, shortID, originalURL)
}

// SaveShortID mocks base method.
func (m *MockIURLRepository) SaveShortID(ctx context.Context, shortID, originalURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveShortID", ctx, shortID, originalURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveShortID indicates an expected call of SaveShortID.
func (mr *MockIURLRepositoryMockRecorder) SaveShortID(ctx, shortID, originalURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveShortID", reflect.TypeOf((*MockIURLRepository)(nil).SaveShortID), ctx, shortID, originalURL)
}
