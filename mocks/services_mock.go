// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/interfaces.go -destination=mocks/services_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/VladimirAzanza/url-shortener/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockIURLService is a mock of IURLService interface.
type MockIURLService struct {
	ctrl     *gomock.Controller
	recorder *MockIURLServiceMockRecorder
	isgomock struct{}
}

// MockIURLServiceMockRecorder is the mock recorder for MockIURLService.
type MockIURLServiceMockRecorder struct {
	mock *MockIURLService
}

// NewMockIURLService creates a new mock instance.
func NewMockIURLService(ctrl *gomock.Controller) *MockIURLService {
	mock := &MockIURLService{ctrl: ctrl}
	mock.recorder = &MockIURLServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIURLService) EXPECT() *MockIURLServiceMockRecorder {
	return m.recorder
}

// BatchDeleteURLs mocks base method.
func (m *MockIURLService) BatchDeleteURLs(ctx context.Context, shortURLs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteURLs", ctx, shortURLs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDeleteURLs indicates an expected call of BatchDeleteURLs.
func (mr *MockIURLServiceMockRecorder) BatchDeleteURLs(ctx, shortURLs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteURLs", reflect.TypeOf((*MockIURLService)(nil).BatchDeleteURLs), ctx, shortURLs)
}

// BatchShortenURL mocks base method.
func (m *MockIURLService) BatchShortenURL(ctx context.Context, request dto.BatchRequestDTO) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchShortenURL", ctx, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchShortenURL indicates an expected call of BatchShortenURL.
func (mr *MockIURLServiceMockRecorder) BatchShortenURL(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchShortenURL", reflect.TypeOf((*MockIURLService)(nil).BatchShortenURL), ctx, request)
}

// ConcurrentBatchDelete mocks base method.
func (m *MockIURLService) ConcurrentBatchDelete(ctx context.Context, shortURLs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConcurrentBatchDelete", ctx, shortURLs)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConcurrentBatchDelete indicates an expected call of ConcurrentBatchDelete.
func (mr *MockIURLServiceMockRecorder) ConcurrentBatchDelete(ctx, shortURLs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConcurrentBatchDelete", reflect.TypeOf((*MockIURLService)(nil).ConcurrentBatchDelete), ctx, shortURLs)
}

// GetOriginalURL mocks base method.
func (m *MockIURLService) GetOriginalURL(ctx context.Context, shortID string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalURL", ctx, shortID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetOriginalURL indicates an expected call of GetOriginalURL.
func (mr *MockIURLServiceMockRecorder) GetOriginalURL(ctx, shortID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalURL", reflect.TypeOf((*MockIURLService)(nil).GetOriginalURL), ctx, shortID)
}

// GetStorageType mocks base method.
func (m *MockIURLService) GetStorageType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStorageType indicates an expected call of GetStorageType.
func (mr *MockIURLServiceMockRecorder) GetStorageType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageType", reflect.TypeOf((*MockIURLService)(nil).GetStorageType))
}

// PingDB mocks base method.
func (m *MockIURLService) PingDB(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingDB", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingDB indicates an expected call of PingDB.
func (mr *MockIURLServiceMockRecorder) PingDB(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingDB", reflect.TypeOf((*MockIURLService)(nil).PingDB), ctx)
}

// ShortenAPIURL mocks base method.
func (m *MockIURLService) ShortenAPIURL(ctx context.Context, shortenRequest *dto.ShortenRequestDTO) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenAPIURL", ctx, shortenRequest)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenAPIURL indicates an expected call of ShortenAPIURL.
func (mr *MockIURLServiceMockRecorder) ShortenAPIURL(ctx, shortenRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenAPIURL", reflect.TypeOf((*MockIURLService)(nil).ShortenAPIURL), ctx, shortenRequest)
}

// ShortenURL mocks base method.
func (m *MockIURLService) ShortenURL(ctx context.Context, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenURL", ctx, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenURL indicates an expected call of ShortenURL.
func (mr *MockIURLServiceMockRecorder) ShortenURL(ctx, originalURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenURL", reflect.TypeOf((*MockIURLService)(nil).ShortenURL), ctx, originalURL)
}
